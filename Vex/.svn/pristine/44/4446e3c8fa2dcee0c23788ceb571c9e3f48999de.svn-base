using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using HZY.COM;
using HZY.COM.Common;
using HZY.COM.Common.DBAccess;
using HZY.COM.WS.DataSets;
using System.Collections;
using HZY.COM.Common.Base;
using System.Data;

///WSID:6e647c56-cd98-4eb9-ae95-0021cc435801
///创建人：俞佳伟
///创建日期：2015-07-20

namespace HZY.COM.WS.PLMAS
{
    class ProductPlan : HZYLogicBase, ILogicGetData
    {
        #region 构造函数
        public ProductPlan()
        {
            this.m_SessionCheck = true;
        }
        #endregion

        #region  全局变量
        private Dbconn m_conn;
        private Dbconn m_ConnErpAss = new Dbconn("ERPASS");
        private DataTable dt_EditResult = new dsCommon.dtResultDataTable();

        DataSet m_Return = new DataSet();
        DataSet ds = new DataSet();
        #endregion

        #region GetData
        public DataSet GetData()
        {
            try
            {
                string strXML = "";

                strXML = m_request.Tables[0].Rows[0]["XML"].ToString();
                ds = Common.Common.GetDSByExcelXML(strXML);
                DataTable dtOPTYPE = ds.Tables["OPTYPE"];
                DataTable dtList = ds.Tables["List"];

                var strzt = dtList.Rows[0]["zt"].ToString();//获取帐套

                m_conn = new Dbconn("PLM_AS_" + strzt);

                if (dtOPTYPE.Rows[0][0].ToString().ToUpper() == "ImportPlan".ToUpper())
                {
                    ImportPlan();
                }
                else if (dtOPTYPE.Rows[0][0].ToString().ToUpper() == "DeletePlan".ToUpper())
                {
                    DeletePlan();
                }
                else if (dtOPTYPE.Rows[0][0].ToString().ToUpper() == "UpdatePlan".ToUpper())
                {
                    UpdatePlan();
                }
                return m_Return;
            }
            catch
            {
                m_conn.RollbackTransaction();
                throw;
            }
        }
        #endregion

        #region 内部函数

        #region 商品企划维护 导入计划
        private void ImportPlan()
        {
            bool bResult = true;
            DataTable dtFromExcel = DeleteNullRowData(m_RequestBak.Tables[0]);

            if (dtFromExcel.Rows.Count > 0)
            {
                if (CheckForExcel(dtFromExcel))
                {
                    DataTable UserTable = GetUserIdFromName();

                    //创建插入表
                    DataTable InsertTable = new DataTable();
                    InsertTable.Columns.Add("UserID");
                    //InsertTable.Columns.Add("BoDuan");
                    //InsertTable.Columns.Add("Brand");
                    //InsertTable.Columns.Add("StyleSeries");
                    //InsertTable.Columns.Add("Category");
                    InsertTable.Columns.Add("PlaceHolderID");
                    InsertTable.Columns.Add("DisplaySubCategory");
                    InsertTable.Columns.Add("CostMultiplyingpower");
                    InsertTable.Columns.Add("TargetCost");
                    InsertTable.Columns.Add("PlanedRetailedPrice");
                    InsertTable.Columns.Add("PlanedFabricCost");

                    for (int i = 0; i < dtFromExcel.Rows.Count; i++)
                    {
                        string strBrand = dtFromExcel.Rows[i]["品牌"].ToString().Trim();
                        if ("EP,EP.Lab,EP.Zen,E.Prosper,DoubleLove".Contains(strBrand))
                        {
                            DataRow[] userDataRow = UserTable.Select("UserNameC='" + dtFromExcel.Rows[i]["设计师"].ToString().Trim() + "'");
                            if (userDataRow.Length == 1)
                            {
                                DataRow dr = InsertTable.NewRow();
                                dr["UserID"] = userDataRow[0]["username"].ToString();
                                //dr["BoDuan"] = dtFromExcel.Rows[i]["上市日期"].ToString().Trim();
                                //dr["Brand"] = dtFromExcel.Rows[i]["品牌"].ToString().Trim();
                                //dr["StyleSeries"] = dtFromExcel.Rows[i]["系列"].ToString().Trim();
                                //dr["Category"] = dtFromExcel.Rows[i]["品类"].ToString().Trim();
                                dr["PlaceHolderID"] = dtFromExcel.Rows[i]["占位符"].ToString().Trim();
                                dr["DisplaySubCategory"] = dtFromExcel.Rows[i]["SKC要求"].ToString().Trim();
                                dr["CostMultiplyingpower"] = dtFromExcel.Rows[i]["成本倍率"].ToString().Trim();
                                dr["TargetCost"] = dtFromExcel.Rows[i]["目标成本"].ToString().Trim();
                                dr["PlanedRetailedPrice"] = dtFromExcel.Rows[i]["计划吊牌价"].ToString().Trim();
                                dr["PlanedFabricCost"] = dtFromExcel.Rows[i]["计划面料成本"].ToString().Trim();

                                InsertTable.Rows.Add(dr);
                            }
                            else
                            {
                                bResult = false;
                                break;
                            }
                        }
                    }
                    if (bResult)
                    {
                        m_conn.BeginTransaction();
                        ArrayList aList = new ArrayList();
                        aList.Add("PlaceHolderID");
                        bResult = m_conn.Update("WsUserPower_Test", InsertTable, aList);
                        if (bResult)
                        {
                            dt_EditResult.Rows.Add(new object[] { true, "导入成功" });
                            m_conn.CommitTransaction();
                        }
                        else
                        {
                            dt_EditResult.Rows.Add(new object[] { false, "导入失败" });
                            m_conn.RollbackTransaction();
                        }
                    }
                    else
                    {
                        dt_EditResult.Rows.Add(new object[] { false, "导入失败:" + "设计师不存在或者存在多个" });
                    }
                }
                else
                {
                    dt_EditResult.Rows.Add(new object[] { false, "导入的EXCEL没有数据" });
                }
            }
            else
            {
                dt_EditResult.Rows.Add(new object[] { false, "导入的EXCEL格式不正确" });
            }
            m_Return.Tables.Add(dt_EditResult);
        }
        #endregion

        #region 商品企划维护 移除计划
        private void DeletePlan()
        {
            bool bResult = true;
            DataTable dtFromExcel = DeleteNullRowData(m_RequestBak.Tables[0]);
            if (CheckForExcel(dtFromExcel))
            {
                DataTable UserTable = GetUserIdFromName();

                //创建插入表
                DataTable UpdateTable = new DataTable();
                UpdateTable.Columns.Add("UserID");
                UpdateTable.Columns.Add("BoDuan");
                UpdateTable.Columns.Add("Brand");
                UpdateTable.Columns.Add("Season");
                UpdateTable.Columns.Add("StyleSeries");
                UpdateTable.Columns.Add("Category");
                UpdateTable.Columns.Add("PlaceHolderID");
                UpdateTable.Columns.Add("DisplaySubCategory");
                UpdateTable.Columns.Add("CostMultiplyingpower");
                UpdateTable.Columns.Add("TargetCost");
                UpdateTable.Columns.Add("PlanedRetailedPrice");
                UpdateTable.Columns.Add("PlanedFabricCost");

                for (int i = 0; i < dtFromExcel.Rows.Count; i++)
                {
                    string strBrand = dtFromExcel.Rows[i]["品牌"].ToString().Trim();
                    if ("EP,EP.Lab,EP.Zen,E.Prosper,DoubleLove".Contains(strBrand))
                    {
                        DataRow dr = UpdateTable.NewRow();
                        dr["UserID"] = "";
                        dr["BoDuan"] = dtFromExcel.Rows[i]["上市日期"].ToString().Trim();
                        dr["Brand"] = dtFromExcel.Rows[i]["品牌"].ToString().Trim();
                        dr["Season"] = dtFromExcel.Rows[i]["品牌"].ToString().Trim();
                        dr["StyleSeries"] = dtFromExcel.Rows[i]["系列"].ToString().Trim();
                        dr["Category"] = dtFromExcel.Rows[i]["品类"].ToString().Trim();
                        dr["PlaceHolderID"] = dtFromExcel.Rows[i]["占位符"].ToString().Trim();
                        dr["DisplaySubCategory"] = "";
                        dr["CostMultiplyingpower"] = "";
                        dr["TargetCost"] = "";
                        dr["PlanedRetailedPrice"] = "";
                        dr["PlanedFabricCost"] = "";

                        UpdateTable.Rows.Add(dr);
                    }
                    else
                    {
                        bResult = false;
                        break;
                    }
                }
                if (bResult)
                {
                    ArrayList aList = new ArrayList();
                    aList.Add("BoDuan");
                    aList.Add("Brand");
                    aList.Add("Season");
                    aList.Add("StyleSeries");
                    aList.Add("Category");
                    aList.Add("PlaceHolderID");

                    m_conn.BeginTransaction();
                    bResult = m_conn.Update("WsUserPower_Test", UpdateTable, aList);
                }
                if (bResult)
                {
                    dt_EditResult.Rows.Add(new object[] { true, "移除计划成功" });
                    m_conn.CommitTransaction();
                }
                else
                {
                    dt_EditResult.Rows.Add(new object[] { false, "移除计划失败" });
                    m_conn.RollbackTransaction();
                }
            }
            else
            {
                dt_EditResult.Rows.Add(new object[] { false, "导入的EXCEL格式不正确" });
            }
            m_Return.Tables.Add(dt_EditResult);
        }
        #endregion

        #region 商品企划维护 更改计划
        private void UpdatePlan()
        {
            bool bResult = false;
            //创建插入表
            DataTable UpdateTable = new DataTable();
            UpdateTable.Columns.Add("UserID");
            //UpdateTable.Columns.Add("BoDuan");
            //UpdateTable.Columns.Add("Brand");
            //UpdateTable.Columns.Add("Season");
            //UpdateTable.Columns.Add("StyleSeries");
            //UpdateTable.Columns.Add("Category");
            UpdateTable.Columns.Add("PlaceHolderID");
            UpdateTable.Columns.Add("DisplaySubCategory");
            UpdateTable.Columns.Add("CostMultiplyingpower");
            UpdateTable.Columns.Add("TargetCost");
            UpdateTable.Columns.Add("PlanedRetailedPrice");
            UpdateTable.Columns.Add("PlanedFabricCost");

            DataRow dr = UpdateTable.NewRow();
            dr["UserID"] = ds.Tables["list"].Rows[0]["UserID"].ToString().Trim();
            //dr["BoDuan"] = ds.Tables["list"].Rows[0]["boduan"].ToString().Trim();
            //dr["Brand"] = ds.Tables["list"].Rows[0]["Brand"].ToString().Trim();
            //dr["Season"] = ds.Tables["list"].Rows[0]["Season"].ToString().Trim();
            //dr["StyleSeries"] = ds.Tables["list"].Rows[0]["series"].ToString().Trim();
            //dr["Category"] = ds.Tables["list"].Rows[0]["category"].ToString().Trim();
            dr["PlaceHolderID"] = ds.Tables["list"].Rows[0]["PlaceHolderID"].ToString().Trim();
            dr["DisplaySubCategory"] = ds.Tables["list"].Rows[0]["DisplaySubCategory"].ToString().Trim();
            dr["CostMultiplyingpower"] = ds.Tables["list"].Rows[0]["CostMultiplyingpower"].ToString().Trim();
            dr["TargetCost"] = ds.Tables["list"].Rows[0]["TargetCost"].ToString().Trim();
            dr["PlanedRetailedPrice"] = ds.Tables["list"].Rows[0]["PlanedRetailedPrice"].ToString().Trim();
            dr["PlanedFabricCost"] = ds.Tables["list"].Rows[0]["PlanedFabricCost"].ToString().Trim();

            UpdateTable.Rows.Add(dr);

            m_conn.BeginTransaction();
            ArrayList aList = new ArrayList();
            aList.Add("PlaceHolderID");

            bResult = m_conn.Update("WsUserPower_Test", UpdateTable, aList);

            if (bResult)
            {
                dt_EditResult.Rows.Add(new object[] { true, "修改成功" });
                m_conn.CommitTransaction();
            }
            else
            {
                dt_EditResult.Rows.Add(new object[] { false, "修改失败" });
                m_conn.RollbackTransaction();
            }

            m_Return.Tables.Add(dt_EditResult);
        }
        #endregion

        #region 检查导入的EXCEL是否符合格式
        /// <summary>
        /// 检查导入的EXCEL是否符合格式
        /// </summary>
        /// <param name="dt">需要检查的Table</param>
        /// <returns>bool</returns>
        private bool CheckForExcel(DataTable dt)
        {
            bool bCheck = true;
            if (!dt.Columns.Contains("上市日期"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("品牌"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("系列"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("品类"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("占位符"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("SKC要求"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("设计师"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("成本倍率"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("目标成本"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("计划吊牌价"))
            {
                bCheck = false;
            }
            if (!dt.Columns.Contains("计划面料成本"))
            {
                bCheck = false;
            }
            return bCheck;
        }
        #endregion

        #region 获取Userid
        private DataTable GetUserIdFromName()
        {
            string strSQL = @"SELECT [username],[UserNameC] FROM [PLMAss].[dbo].[USERINFO] WITH(NOLOCK)";
            DataTable dt = m_conn.GetDataTable(strSQL);
            return dt;
        }
        #endregion

        #region 删除DataTable中的空行
        private DataTable DeleteNullRowData(DataTable dt)
        {
            DataRow[] dr = dt.Select("占位符=''");
            for (int i = 0; i < dr.Length; i++)
            {
                dt.Rows.Remove(dr[i]);
            }
            return dt;
        }

        #endregion

        #endregion
    }
}
