using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.ComponentModel;
using System.Text;
using System.IO;

namespace Talent.Web.TalentCx
{
    public partial class TalentCx : System.Web.UI.Page
    {
        private static BLL.TB_RC_TalentInfor tidb = new BLL.TB_RC_TalentInfor();
        private static BLL.TB_RC_Permission pidb = new BLL.TB_RC_Permission();

        protected int total = 0;
        protected int index = 0;

        protected string queryStr = "";
        protected string listStr = "";
        protected Model.TB_RC_TalentInfor queryModel = null;
        protected Model.TB_RC_Permission per = null;
        protected void Page_Load(object sender, EventArgs e)
        {
            var tmp = Common.Constants.getNullToString(Tools.SessionHelper.Get("userid"));
            if (tmp == "")
            {
                per = new Model.TB_RC_Permission();
                queryModel = new Model.TB_RC_TalentInfor();
            }
            else
            {
                per = pidb.GetModel(tmp);

                tmp = Common.Constants.getReqValue(Request, "numPerPage");
                int pagesize = Convert.ToInt32(tmp == "" ? "0" : tmp);
                tmp = Common.Constants.getReqValue(Request, "pageNum");
                index = Convert.ToInt32(tmp == "" ? "1" : tmp);

                queryModel = new Model.TB_RC_TalentInfor();

                queryModel.CB_Name = Common.Constants.getReqValue(Request, "CB_Name");
                queryModel.CB_Position = Common.Constants.getReqValue(Request, "CB_Position");
                queryModel.TI_Name = Common.Constants.getReqValue(Request, "TI_Name");
                queryModel.TI_TalentClass = Common.Constants.getReqValue(Request, "TI_TalentClass");
                queryModel.TI_Sex = Common.Constants.getReqValue(Request, "TI_Sex");
                queryModel.TI_Src = Common.Constants.getReqValue(Request, "TI_Src");
                queryModel.TI_Audition = Common.Constants.getReqValue(Request, "TI_Audition");
                queryModel.TI_AuditionResult = Common.Constants.getReqValue(Request, "TI_AuditionResult");
                queryModel.TI_FollowUpPeople = Common.Constants.getReqValue(Request, "TI_FollowUpPeople");
                queryModel.TI_RecommendPost = Common.Constants.getReqValue(Request, "TI_RecommendPost");

                tmp = getQueryStr(queryModel);
                tmp += Common.Constants.getQueryStr(per.PM_Province);
                queryStr = tmp;
                total = tidb.GetTotalMerge(tmp);
                listStr = GetTalentList(pagesize, index, tmp, total);
            }
        }

        protected string getQueryStr(Model.TB_RC_TalentInfor queryModel)
        {
            StringBuilder sb = new StringBuilder();
            var properties = TypeDescriptor.GetProperties(queryModel);
            foreach (PropertyDescriptor propertyDescriptror in properties)
            {
                var tmpValue = propertyDescriptror.GetValue(queryModel);
                if (tmpValue != null)
                {
                    if (propertyDescriptror.PropertyType == typeof(string) && (tmpValue.ToString().Trim() != ""))
                    {
                        sb.Append(string.Format(" and {0} like '%{1}%' ", propertyDescriptror.Name, tmpValue));
                    }
                    
                }
            } 
            return sb.ToString();
        }

        public  string GetTalentList(int pagesize, int index, string querystr, int total)
        {
            int itempager = Common.Constants.GetPageItems(ref pagesize, index, total);
            if (itempager <= 0) return "";
            StringBuilder sb = new StringBuilder();
            List<Model.TB_RC_TalentInfor> list = tidb.GetModelListMerge(pagesize, index, querystr, itempager);
            foreach (var obj in list)
            {
                sb.Append("<tr><td>");
                sb.Append(obj.TI_No);
                sb.Append("</td><td>");
                sb.Append(obj.CB_Name);
                sb.Append("</td><td>");
                sb.Append(obj.CB_Position);
                sb.Append("</td><td>");
                sb.Append(obj.TI_BrandName);
                sb.Append("</td><td>");
                sb.Append(obj.TI_TalentClass);
                sb.Append("</td><td>");
                sb.Append(obj.TI_Name);
                sb.Append("</td><td>");
                sb.Append(obj.TI_Sex);
                sb.Append("</td><td>");
                if (per.PM_Level >= 1)
                {
                    sb.Append(obj.TI_Phone);
                    sb.Append("</td><td>");
                }
                sb.Append( obj.TI_Src);
                sb.Append("</td><td>");
                sb.Append(obj.TI_RecommendPost);
                sb.Append("</td><td>");
                sb.Append(obj.TI_Audition);
                sb.Append("</td><td>");
                sb.Append(obj.TI_AuditionResult);
                sb.Append("</td><td>");
                sb.Append(obj.TI_FollowUpPeople);
                sb.Append("</td><td>");
               // sb.Append((obj.TI_MaintainDate == null ? "" : obj.TI_MaintainDate.Value.ToString("yyyy-MM-dd")));
               // sb.Append("</td><td>");
               // sb.Append(obj.TI_MaintainResult);
              //  sb.Append("</td><td>");
                sb.Append("<a href='TalentInfo/TalentUpkeep.aspx?status=99&CB_No=" + obj.TI_CB_No + "&TI_No=" + obj.TI_No + "' target='dialog' mask=true  rel='ducument_dia' title='' width='400' height='500'>维护管理</a>");
                if (per.PM_Level >= 1)
                {
                    sb.Append("</td><td>");
                    sb.Append("<a href='TalentInfo/TalentDocument.aspx?CB_No=" + obj.TI_CB_No + "&TI_No=" + obj.TI_No + "&status=99' target='dialog' mask=true  rel='ducument_dia' title='' width='400' height='500'>简历管理</a>");
                }
                sb.Append("</td></tr>");  
            }
            return sb.ToString();
        }

        /**
         * 导出
         */
        public static StringWriter ReportTalent(string queryStr)
        {
            StringWriter sw = new StringWriter();
            sw.WriteLine("序号,公司名称,公司所在地,品牌或企业,人才类别,姓名,性别,联系方式,来源,推荐岗位,是否面试,面试结果,跟进人");
            List<Model.TB_RC_TalentInfor> list = tidb.GetModelListMerge(queryStr);
            foreach (var obj in list)
            {
                sw.Write("=\"" + obj.TI_No + "\"");
                sw.Write(",=\"" + obj.CB_Name + "\"");
                sw.Write(",=\"" + obj.CB_Position + "\"");
                sw.Write(",=\"" + obj.TI_BrandName + "\"");
                sw.Write(",=\"" + obj.TI_TalentClass + "\"");
                sw.Write(",=\"" + obj.TI_Name + "\"");
                sw.Write(",=\"" + obj.TI_Sex + "\"");
                sw.Write(",=\"" + obj.TI_Phone + "\"");
                sw.Write(",=\"" + obj.TI_Src + "\"");
                sw.Write(",=\"" + obj.TI_RecommendPost + "\"");
                sw.Write(",=\"" + obj.TI_Audition + "\"");
                sw.Write(",=\"" + obj.TI_AuditionResult + "\"");
                sw.WriteLine(",=\"" + obj.TI_FollowUpPeople + "\"");
                //sw.Write(",=\"" + (obj.TI_MaintainDate == null ? "" : obj.TI_MaintainDate.Value.ToString("yyyy-MM-dd")) + "\"");
                //sw.WriteLine(",=\"" + obj.TI_MaintainResult + "\"");
            }
            sw.Close();
            return sw;
        }
    }
}